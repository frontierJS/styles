@use "sass:math";
// create a list of our sizes that can beused for looping
// I guess it is just the keys of $bps
// look up sass loops and getting map-keys

$bps: (
  'bl': $bl,
  'sec': $sec,
  'xxs': $xxs,
  'xs': $xs,
  'sm': $sm,
  'md': $md,
  'lm': $lm,
  'lg': $lg,
  'xl': $xl,
  'xxl': $xxl,
  'huge': $huge,
);

// Core Mixins
@mixin g-span($start: start, $end: end) {
  grid-column-start: $start;
  grid-column-end: $end;
}

@mixin min-bp($bp) {
  @if map-has-key($bps, $bp) {
    @media (min-width: #{map-get($bps, $bp)}) {
      @content;
    }
  } @else {
    @warn "Unfortunately, no value could be retrieved from `#{$bp}`. "
        + "Please make sure it is defined in `$breakpoints` map.";
  }
}

@mixin max-bp($bp) {
  @if map-has-key($bps, $bp) {
    @media (max-width: #{map-get($bps, $bp)}) {
      @content;
    }
  } @else {
    @warn "Unfortunately, no value could be retrieved from `#{$bp}`. "
        + "Please make sure it is defined in `$breakpoints` map.";
  }
}

@mixin d-grid-display($bp) {
  $bp-count: map-get($bps, $bp) / $block;
  $bp-2: $block;
  display: grid;
  grid-template-columns: [start] repeat(auto-fit, minmax($bp-2, 1fr)) [end];
  .gx-span-full {
    grid-column-start: 1;
    grid-column-end: -1;
  }
  .gx-span-1 {
    grid-column: span 1;
  }
  .gx-span-2 {
    grid-column: span 2;
  }
  .gx-span-3 {
    grid-column: span 3;
  }
  .gx-span-4 {
    grid-column: span 4;
  }
  .gx-span-half {
    grid-column: span floor($bp-count / 2);
  }
  .gx-span-quarter {
    grid-column: span floor($bp-count / 4);
  }
  .gx-span-eighth {
    grid-column: span floor($bp-count / 8);
  }
}

@mixin x($bp, $mult: 1) {
  $bpV: map-get($bps, $bp);
  max-width: $bpV - ($block * $mult);
  margin-left: auto;
  margin-right: auto;
}

@mixin y($bp, $mult: 1) {
  $bpV: map-get($bps, $bp);
  max-width: $bpV - ($block * $mult);
  margin-top: auto;
  margin-bottom: auto;
}

@mixin t($bp, $mult: 1) {
  $bpV: map-get($bps, $bp);
  max-width: $bpV - ($block * $mult);
  margin-bottom: auto;
}
@mixin b($bp, $mult: 1) {
  $bpV: map-get($bps, $bp);
  max-width: $bpV - ($block * $mult);
  margin-top: auto;
}
@mixin l($bp, $mult: 1) {
  $bpV: map-get($bps, $bp);
  max-width: $bpV - ($block * $mult);
  margin-right: auto;
}
@mixin r($bp, $mult: 1) {
  $bpV: map-get($bps, $bp);
  max-width: $bpV - ($block * $mult);
  margin-left: auto;
}

@mixin box($val, $bp) {
  &.#{$val},
  &.#{$val}\@#{$bp},
  &._#{$val} > *:not(.el),
  &._#{$val}\@#{$bp} > *:not(.el) {
    @if $val == x {
      @include x($bp);
    }
    @if $val == y {
      @include y($bp);
    }
    @if $val == t {
      @include t($bp);
    }
    @if $val == b {
      @include b($bp);
    }
    @if $val == r {
      @include r($bp);
    }
    @if $val == l {
      @include l($bp);
    }
  }
}

@mixin bp-utils($bp) {
  $bp-count: map-get($bps, $bp) / $block;
  $bpV: map-get($bps, $bp);

  //@each $oKey, $oVal in $size-options {
  //@each $mKey, $mVal in $multipliers {
  //$key: #{$oKey}#{$mKey};
  //.#{$key} {
  //#{$oVal}: 25% * $mVal;
  //}
  //._#{$key} > * {
  //#{$oVal}: 25% * $mVal;
  //}
  //}
  //}

  .dn\@#{$bp} {
    display: none;
  }
  .d\@#{$bp} {
    display: unset;
  }
  .w\@#{$bp} {
    max-width: #{map-get($bps, $bp)};
  }
  .box {
    display: block;
    width: 100%;
    min-width: $d-box-min-width;
    @include box(x, $bp);
    & > .-x {
      max-width: $bpV - ($block * 2) !important;
      margin-left: auto !important;
      margin-right: auto !important;
    }
    & > .-c {
      margin: auto !important;
      max-width: max-content !important;
    }
    & > .-c\@#{$bp} {
      margin: auto !important;
      max-width: max-content !important;
    }

    @include box(t, $bp);
    & > .-t {
      max-width: $bpV - ($block * 2) !important;
      margin-bottom: auto !important;
      margin-top: 0 !important;
    }
    @include box(b, $bp);
    & > .-b {
      max-width: $bpV - ($block * 2) !important;
      margin-top: auto !important;
      margin-bottom: 0 !important;
    }
    @include box(r, $bp);
    & > .-r {
      max-width: $bpV - ($block * 2) !important;
      margin-left: auto !important;
      margin-right: 0 !important;
    }
    @include box(l, $bp);
    & > .-l {
      max-width: $bpV - ($block * 2) !important;
      margin-right: auto !important;
      margin-left: 0 !important;
    }
  }
}

@mixin bp($start, $stop: huge) {
  @include max-bp($stop) {
    @include min-bp($start) {
      @include bp-utils($start);
      @content;
    }
  }
}

// Child Mixins
//TODO: make the this a loop function
// @each $bKey, $bp in $bps {
//   @include bp($bKey);
// }

@mixin bl($stop: huge) {
  @include bp(bl, $stop) {
    @content;
  }
}
@mixin sec($stop: huge) {
  @include bp(sec, $stop) {
    @content;
  }
}
@mixin xxs($stop: huge) {
  @include bp(xxs, $stop) {
    @content;
  }
}
@mixin xs($stop: huge) {
  @include bp(xs, $stop) {
    @content;
  }
}
@mixin sm($stop: huge) {
  @include bp(sm, $stop) {
    @content;
  }
}
@mixin md($stop: huge) {
  @include bp(md, $stop) {
    @content;
  }
}
@mixin lm($stop: huge) {
  @include bp(lm, $stop) {
    @content;
  }
}
@mixin lg($stop: huge) {
  @include bp(lg, $stop) {
    @content;
  }
}
@mixin xl($stop: huge) {
  @include bp(xl, $stop) {
    @content;
  }
}
@mixin xxl($stop: huge) {
  @include bp(xxl, $stop) {
    @content;
  }
}

@mixin bps-debug-utils($bp, $color) {
  $breakpoint: map-get($bps, $bp) / $block;
  border: 3px solid $color;
  &::before {
    background-color: $color;
    display: block;
    width: 100%;
    content: '#{$bp}@min-width #{map-get($bps, $bp)}  -- #{$breakpoint} blocks wide';
    grid-column: 1 / -1;
  }
}

//TODO: make the this a loop function
@mixin bps-debug {
  .bps-debug {
    @media (max-width: 300px) {
      // Show that we don't need to size for this small
      display: none;
    }
    border: 3px solid violet; //less than 385px
    @include xxs {
      @include bps-debug-utils(xxs, green);
    }
    @include xs {
      @include bps-debug-utils(xs, #ff7b7b);
    }
    @include sm {
      @include bps-debug-utils(sm, orange);
    }
    @include md {
      @include bps-debug-utils(md, yellow);
    }
    @include lm {
      @include bps-debug-utils(lm, #46cc46);
    }
    @include lg {
      @include bps-debug-utils(lg, #5454ff);
    }
    @include xl {
      @include bps-debug-utils(xl, #bc67fb);
    }
    @include xxl {
      @include bps-debug-utils(xxl, violet);
    }
  }
}

@mixin site-layout {
  .dn {
    display: none;
  }
  ._dn > * {
    display: none;
  }
  @include xxs {
  }
  @include xs {
  }
  @include sm {
  }
  @include md {
  }
  @include lm {
  }
  @include lg {
  }
  @include xl {
  }
  @include xxl {
  }
}

/* Examples
* You can use @include bp({start}, {stop})
* or an single breakpoint @include sm({stop})

@mixin site-layout() {
  // DEFAULT
  display: flex;
  flex-flow: column;
  .links {
    display: none;
  }

  // XS
  @include xs { }

  // SM
  @include sm {
    display: grid;
    grid: [start] 1fr [end] / [start]
      repeat(auto-fit, minmax($block, 1fr)) [end];

    .search {
      grid-column: start / span 2;
    }
    .footer {
      grid-column: start / end;
    }
    .links {
      display: block;
      @include g-span;
    }
    .content {
      @include g-span(3, end);
    }
  }

  // MD
  @include md {
    .content {
      @include g-span(3, -2);
    }
    .links {
      @include g-span(-2, -1);
    }
  }

  // LG
  @include lg { }
}

.app {
  height: 100%;
}
*/

/* Output
============================================================================= */

// @include site-layout;
// @include bps-debug;
