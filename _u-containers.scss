/* Grid
============================================================================= */
@mixin grid() {
  .grid {
    display: grid;
    grid-auto-flow: row;
    &.columns {
      grid-auto-flow: column;
    }
    &.s {
      place-content: stretch;
    }
    &.sb {
      place-content: space-between;
    }
    &.sa {
      place-content: space-around;
    }
    &.se {
      place-content: space-evenly;
    }
    &.c {
      place-content: center;
    }
    &.b {
      align-content: end;
    }
    &._b {
      align-items: end;
    }
    &.r {
      place-content: end;
    }
    &._r {
      place-items: end;
    }
    &.x {
      justify-content: center;
    }
    &.y {
      align-content: center;
    }
    &._c {
      place-items: center;
    }
    &._x {
      justify-items: center;
    }
    &._y {
      align-items: center;
    }
    & > * {
      &.-c {
        place-self: center;
      }
      &.-x {
        justify-self: center;
      }
      &.-y {
        align-self: center;
      }
      &.-l {
        justify-self: start;
      }
      &.-r {
        justify-self: end;
      }
      &.-b {
        align-self: end;
      }
      &.-t {
        align-self: start;
      }
    }
  }
  & > .spacer {
  }
  .gap {
    gap: 10vmin;
  }
  .gap-sm {
    gap: 5vmin;
  }
  .gap-lg {
    gap: 20vmin;
  }

  .grid-all > * {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(16px, 1fr));
  }
}
/* Row
============================================================================= */
@mixin row() {
  .row {
    width: fit-content;
    width: -moz-fit-content;
    display: flex;
    justify-content: center;
    &.wrap {
      flex-wrap: wrap;
    }
    & > * {
      flex: 1 1 auto;
    }
    // not used: align-content
    &.t,
    &.b,
    &._l,
    & > .-l,
    &.r,
    & > .-r {
      &::before {
        @include warning('Not used in rows');
      }
    }

    &.y {
      align-content: center;
    }
    &._y {
      align-items: center;
    }
    & > .-y {
      align-self: center;
    }

    //c
    &.c {
      align-items: center;
      justify-content: center;
    }
    &.-c {
      align-self: center;
      flex: 0 1 0;
    }
    &._c {
      align-items: center;
      & > * {
        flex: 0 1 0;
      }
    }

    //x
    &._x > *,
    & > .-x {
      flex: 0 1 0;
    }
    &._g > *,
    & > .-g {
      flex: 1 0 auto;
    }

    //sb,sa,se content
    /*
&.t {
  align-content: flex-start;
}
&.b {
  align-content: flex-end;
}
*/
    &.l {
      justify-content: flex-start;
    }
    &.r {
      justify-content: flex-end;
    }
    &.x {
      justify-content: center;
    }

    &._t {
      align-items: flex-start;
    }
    & > .-t {
      align-self: flex-start;
    }

    &._b {
      align-items: flex-end;
    }
    & > .-b {
      align-self: flex-end;
    }

    /*
&._v {
  align-items: baseline;
}
& > .-v {
  align-self: baseline;
}
*/

    &._s {
      align-items: stretch;
    }
    & > .-s {
      align-self: stretch;
    }

    //y
    /*
*/
  }
}
/* Block
============================================================================= */
@mixin block() {
  .block {
    width: fit-content;
    width: -moz-fit-content;
    display: flex;
    justify-content: center;
    flex-flow: column;
    & > * {
      flex: 1 1 auto;
    }
    // not used: align-content
    &.l,
    &.r,
    &._t,
    & > .-t,
    &.b,
    & > .-b {
      &::before {
        @include warning('Not used in blocks');
      }
    }
    //x

    &.x {
      align-content: center;
    }
    &._x {
      align-items: center;
    }
    & > .-x {
      align-self: center;
    }

    //c
    &.c {
      align-items: center;
      justify-content: center;
    }
    &._c {
      align-items: center;
      & > * {
        flex: 0 1 0;
      }
    }
    & > .-c {
      align-self: center;
      flex: 0 1 0;
    }

    //y
    &._y > *,
    & > .-y {
      flex: 0 1 0;
    }
    &._g > *,
    & > .-g {
      flex: 1 0 auto;
    }

    //sb,sa,se content
    /*
&.l {
  align-content: flex-start;
}
&.r {
  align-content: flex-end;
}
*/
    &.t {
      justify-content: flex-start;
    }
    &.b {
      justify-content: flex-end;
    }
    &.y {
      justify-content: center;
    }

    &._l {
      align-items: flex-start;
    }
    & > .-l {
      align-self: flex-start;
    }

    &._r {
      align-items: flex-end;
    }
    & > .-r {
      align-self: flex-end;
    }

    /*
&._v {
  align-items: baseline;
}
& > .-v {
  align-self: baseline;
}
*/

    &._s {
      align-items: stretch;
    }
    & > .-s {
      align-self: stretch;
    }

    & > .spacer {
      flex: 1 0 auto;
    }
  }
}

//Containers
/* Sizing
============================================================================= */
.h-100 {
  height: 100%;
}
.h-screen {
  height: 100vh;
}

// Width
.w-100 {
  width: 100%;
}
.w-75 {
  width: 75%;
}
.w-50 {
  width: 50%;
}
.w-25 {
  width: 25%;
}
.w-screen {
  width: 100vw;
}

// Floats
.fl {
  float: left;
}
.fr {
  float: right;
}

.box > .box::before {
  @include warning("Don't put a box in a box!");
}

/* Output
============================================================================= */

@include grid;
@include block;
@include row;
