/* Overview
  .m[l | r | t | b | x | y | a | n] = Margin *
  .p[l | r | t | b | x | y | n] = Padding *
  .w[l | r | t | b | x | y] = Width *
  .i[l | r | t | b | x | y] = Max-width *
  .h[l | r | t | b | x | y] = Height *
  .e[l | r | t | b | x | y] = Max-height *

  * [Can use multipiers]
    [__, _, --, -, +, ++, *, **]
    [Can be applied to children using (.-)]

  .o[x | y] = Overflow
  .hide, .show = Visibility

  .border
  .background
  .debug
  .ellipsis
  .pointer
============================================================================= */

//TODO revisit where markdown should live
.reader,
.markdown {
  font-family: Montserrat, sans-serif;
  line-height: $d-line-height * 1;
  background-color: #00000004;
  padding-left: $d-padding-x;
  padding-right: $d-padding-x;
  color: $d-black;
  p ~ p {
    margin-top: $d-margin-x;
    word-wrap: break-word;
  }
}

.db {
  outline: 1px solid red;
  .db {
    outline: 1px solid blue;
  }
}
*[debug] * {
  outline: 1px dashed #009ddc !important;
}

.pointer {
  cursor: pointer;
}

.background {
  // background-color: $d-background-color;
  background-color: #f1f5ff;
}

.border {
  border: $d-border;
}
.border-none {
  border: none;
}

/* Margin
============================================================================= */
.ma {
  margin: auto;
}
.mn {
  margin: 0;
}
.mta {
  margin-top: auto;
}
.mba {
  margin-bottom: auto;
}
.mla {
  margin-left: auto;
}
.mra {
  margin-right: auto;
}
.mx {
  margin-left: $d-margin-x;
  margin-right: $d-margin-x;
}
.mxa {
  margin-left: auto;
  margin-right: auto;
}
.my {
  margin-top: $d-margin-y;
  margin-bottom: $d-margin-y;
}
.mya {
  margin-top: auto;
  margin-bottom: auto;
}

$m-axises: x, y;
@each $axis in $m-axises {
  @each $mKey, $mVal in $multipliers {
    $key: m#{$axis}#{$mKey};
    @if $axis == x {
      .#{$key} {
        margin-left: $d-margin-x * $mVal;
        margin-right: $d-margin-x * $mVal;
      }
      ._#{$key} > * {
        margin-left: $d-margin-x * $mVal;
        margin-right: $d-margin-x * $mVal;
      }
    } @else if $axis == y {
      .#{$key} {
        margin-top: $d-margin-y * $mVal;
        margin-bottom: $d-margin-y * $mVal;
      }
      ._#{$key} > * {
        margin-top: $d-margin-y * $mVal;
        margin-bottom: $d-margin-y * $mVal;
      }
    }
  }
}

/* Padding
============================================================================= */

@each $oKey, $oVal in $spacing-options {
  @each $dKey, $dVal in $directions {
    @each $mKey, $mVal in $multipliers {
      $key: #{$oKey}#{$dKey}#{$mKey};
      .#{$key} {
        #{$oVal}#{$dVal}: 1em * $mVal;
      }
      ._#{$key} > * {
        #{$oVal}#{$dVal}: 1em * $mVal;
      }
    }
  }
}

.pn,
._pn > * {
  padding: 0;
}
.p,
._p > * {
  padding: $d-padding-x $d-padding-y;
}
.px,
._px > * {
  padding-left: $d-padding-x;
  padding-right: $d-padding-x;
}

.py,
._py > * {
  padding-top: $d-padding-y;
  padding-bottom: $d-padding-y;
}

$p-axises: x, y;
@each $axis in $p-axises {
  @each $mKey, $mVal in $multipliers {
    $key: p#{$axis}#{$mKey};
    @if $axis == x {
      .#{$key} {
        padding-left: $d-padding-x * $mVal;
        padding-right: $d-padding-x * $mVal;
      }
      ._#{$key} > * {
        padding-left: $d-padding-x * $mVal;
        padding-right: $d-padding-x * $mVal;
      }
    } @else if $axis == y {
      .#{$key} {
        padding-top: $d-padding-y * $mVal;
        padding-bottom: $d-padding-y * $mVal;
      }
      ._#{$key} > * {
        padding-top: $d-padding-y * $mVal;
        padding-bottom: $d-padding-y * $mVal;
      }
    }
  }
}

/* Other
============================================================================= */

.hide {
  visibility: hidden;
}
.show {
  visibility: visible;
}

@each $oKey, $oVal in $size-options {
  @each $mKey, $mVal in $multipliers {
    $key: #{$oKey}#{$mKey};
    .\%#{$key} {
      #{$oVal}: 25% * $mVal;
    }
    ._\%#{$key} > * {
      #{$oVal}: 25% * $mVal;
    }
  }
}
.w\@vw {
  width: 100vw;
}
.h\@vh {
  height: 100vh;
}

.bg-black {
  background-color: black;
}
.v-grey {
  color: #ccc;
}

/* Width
============================================================================= */
.w__ {
  width: 18vmin;
}
.w_ {
  width: 22vmin;
}
.w-- {
  width: 28vmin;
}
.w- {
  width: 32vmin;
}
.w {
  width: 36vmin;
  // width: 100%;
}
.w\+ {
  width: 40vmin;
}

.w\+\+ {
  width: 44vmin;
}
.w\* {
  width: 54vmin;
}

.w\*\* {
  width: 68vmin;
}

/* Max Width
============================================================================= */
.i {
  width: 100%;
  max-width: 100%;
}

.i\@m {
  width: 100%;
  max-width: 5 * 128px;
}

.i__ {
  width: 100%;
  max-width: 18vmin;
}
.i_ {
  width: 100%;
  max-width: 22vmin;
}
.i-- {
  width: 100%;
  max-width: 28vmin;
}
.i {
  width: 100%;
  max-width: 100%;
}
.i- {
  width: 100%;
  max-width: 32vmin;
}
.i\+ {
  width: 100%;
  max-width: 40vmin;
}

.i\+\+ {
  width: 100%;
  max-width: 44vmin;
}
.i\* {
  width: 100%;
  max-width: 54vmin;
}

.i\*\* {
  width: 100%;
  max-width: 68vmin;
}

/* Height
============================================================================= */
.h__ {
  height: 18vmin;
}
.h_ {
  height: 22vmin;
}
.h-- {
  height: 28vmin;
}
.h- {
  height: 32vmin;
}
.h {
  height: 36vmin;
}
.h\+ {
  height: 40vmin;
}

.h\+\+ {
  height: 44vmin;
}
.h\* {
  height: 54vmin;
}

.h\*\* {
  height: 68vmin;
}

/* Max Height
============================================================================= */

.e__ {
  height: 100%;
  max-height: 18vmax;
}
.e_ {
  height: 100%;
  max-height: 22vmax;
}
.e-- {
  height: 100%;
  max-height: 28vmax;
}
.e- {
  height: 100%;
  max-height: 32vmax;
}
.e {
  height: 100%;
  max-height: 36vmax;
}
.e\+ {
  height: 100%;
  max-height: 40vmax;
}

.e\+\+ {
  height: 100%;
  max-height: 44vmax;
}
.e\* {
  height: 100%;
  max-height: 54vmax;
}

.e\*\* {
  height: 100%;
  max-height: 68vmax;
}

/* Overflow
/ overflow:  visible | hidden | scroll | auto | inherit
============================================================================= */

.o {
  overflow: auto;
}
.ox {
  overflow-x: auto;
}

.oy {
  overflow-y: auto;
}

.ellipsis {
text-overflow: ellipsis;
overflow: hidden;
//white-space: nowrap;
//content: '\u2026';
}